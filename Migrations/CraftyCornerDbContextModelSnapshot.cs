// <auto-generated />
using System;
using CraftyCorner.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CraftyCorner.Migrations
{
    [DbContext(typeof(CraftyCornerDbContext))]
    partial class CraftyCornerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CraftyCorner.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "3D Printer"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Die or Die Cut Machine (Sizzix, Etc.)"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Embosser (Plate, Folder, Etc.)"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Gel Plate"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Heat Press"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Lamination Machine"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Laser Cutter/Machine"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Misc Hand Tools"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Other"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Paper Cutter Machine (Cricut, Cameo, Brother ScanNCut, Etc.)"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Sewing Machine"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Stamp Set"
                        });
                });

            modelBuilder.Entity("CraftyCorner.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("text");

                    b.Property<int>("TotalSeats")
                        .HasColumnType("integer");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "555 Ocean Avenue",
                            Body = "Come over and make a poinsettia wreath. I'll have snacks and light refreshments. If you have a glue gun and/or scissors, please bring them. We'll be following this tutorial: https://theshabbytree.com/diy-mesh-ribbon-poinsettia-wreath/",
                            Cost = 15.00m,
                            DateTime = new DateTime(2023, 11, 11, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = "1-2 hours",
                            Name = "Wreath Making Class",
                            PictureUrl = "https://theshabbytree.com/wp-content/uploads/2020/10/122895358_1122291638168766_5385533421705642737_n-980x735.jpg",
                            TotalSeats = 3,
                            UserProfileId = 2
                        });
                });

            modelBuilder.Entity("CraftyCorner.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 10,
                            Manufacturer = "Cricut",
                            Name = "Maker 3",
                            Notes = "Not ready to loan this out, but I'd welcome you to come to my house to use.",
                            PictureUrl = "https://asset.cloudinary.com/dq4w2zwr2/7bd8376af3b8c75fc108f65acab9731b",
                            UserProfileId = 5,
                            isActive = true
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 10,
                            Manufacturer = "Silhouette",
                            Name = "Cameo 4",
                            Notes = "Requires software to run and is registered with my laptop. May need to set up a play date to use.",
                            PictureUrl = "https://asset.cloudinary.com/dq4w2zwr2/31dad32a8f0b4158f8042333b448870e",
                            UserProfileId = 2,
                            isActive = true
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Manufacturer = "Sizzix",
                            Name = "Big Shot",
                            Notes = "I have quite a few dies as well, not yet loaded on the site.",
                            PictureUrl = "https://asset.cloudinary.com/dq4w2zwr2/cd8bcc5b68fa0d1cc62eedc047d2316a",
                            UserProfileId = 2,
                            isActive = true
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 8,
                            Manufacturer = "Cricut",
                            Name = "Multi Tool",
                            Notes = "Used for weeding",
                            PictureUrl = "https://asset.cloudinary.com/dq4w2zwr2/db2d35b8cda97d72eb7578cefccc437d",
                            UserProfileId = 3,
                            isActive = true
                        });
                });

            modelBuilder.Entity("CraftyCorner.Models.ItemComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("BorrowRequest")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("text");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("ItemComments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Body = "I'd love to schedule some time with you and your Maker 3. Do you have availability within the next week or so?",
                            BorrowRequest = true,
                            Date = new DateTime(2023, 9, 21, 11, 5, 12, 0, DateTimeKind.Unspecified),
                            ItemId = 1,
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 2,
                            Body = "Sure! I'm retired and have a flexible schedule. Send me an email at gail@crafts.comx to set something up.",
                            BorrowRequest = false,
                            Date = new DateTime(2023, 9, 22, 12, 4, 11, 0, DateTimeKind.Unspecified),
                            ItemId = 1,
                            UserProfileId = 5
                        },
                        new
                        {
                            Id = 3,
                            Body = "I scheduled a play date with Gail, and we had a blast. Made some super cute crafts with the Maker 3 and made a new crafty friend. She's got an amazing setup.",
                            BorrowRequest = false,
                            Date = new DateTime(2023, 9, 28, 12, 4, 11, 0, DateTimeKind.Unspecified),
                            ItemId = 1,
                            UserProfileId = 2
                        });
                });

            modelBuilder.Entity("CraftyCorner.Models.Rsvp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<string>("RsvpNote")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Rsvps");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EventId = 1,
                            RsvpNote = "Looking forward to it, and I'll bring artichoke dip and crackers.",
                            UserProfileId = 4
                        });
                });

            modelBuilder.Entity("CraftyCorner.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "101 Main Street",
                            FirstName = "Admina",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            IsActive = true,
                            LastName = "Strator"
                        },
                        new
                        {
                            Id = 2,
                            Address = "555 Ocean Avenue",
                            FirstName = "Courtney",
                            IdentityUserId = "f2498ab4-e4b6-4e61-92c0-9568e96a8145",
                            IsActive = true,
                            LastName = "Gulledge"
                        },
                        new
                        {
                            Id = 3,
                            Address = "555 Jackson Street",
                            FirstName = "Joy",
                            IdentityUserId = "d9b5145a-739c-42d3-9e94-d2d439063d7e",
                            IsActive = true,
                            LastName = "Forbess"
                        },
                        new
                        {
                            Id = 4,
                            Address = "555 Middleburg Drive",
                            FirstName = "Shiree",
                            IdentityUserId = "a7bc4dd9-8f10-4e24-8c0c-ef09a24ec9a5",
                            IsActive = true,
                            LastName = "Bridges"
                        },
                        new
                        {
                            Id = 5,
                            Address = "555 Palm Court",
                            FirstName = "Gail",
                            IdentityUserId = "6a2f5d0b-3eac-4dab-ae9d-7f26d77e4a8c",
                            IsActive = true,
                            LastName = "Fogarty"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            ConcurrencyStamp = "f916b8cc-cc7d-437a-bcb4-202f8e4c6b05",
                            Name = "Admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "f2498ab4-e4b6-4e61-92c0-9568e96a8145",
                            ConcurrencyStamp = "e7ee5e99-f31f-4066-b400-73272c6fb5c5",
                            Name = "Courtney",
                            NormalizedName = "courtney"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6376a400-a24b-48e8-83de-c05d7ad87e1f",
                            Email = "admina@strator.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEAz1MDJGlZ+7jQsGb48FPxGe4qfPfLw6KzFiuTLn2lr9Qqiv1OOxW+RTBy0T1oNO6w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8cbe8127-04d2-4939-a231-f21eec4b2af7",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "f2498ab4-e4b6-4e61-92c0-9568e96a8145",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0830aa00-dd46-4089-9863-2cb3030f57b7",
                            Email = "courtney@gmail.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEFsfszk6/deqR4OEgE+NHH4GoCJsE2FAkeLkft2XLcXGbjk+Z4j0cBy69XcxqaLB/Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4256228a-431e-46c8-b8ae-b822d3586474",
                            TwoFactorEnabled = false,
                            UserName = "Courtney"
                        },
                        new
                        {
                            Id = "d9b5145a-739c-42d3-9e94-d2d439063d7e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b38fba5f-1af8-42d8-98e3-7e79af845523",
                            Email = "joy@gmail.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAELEf4Hs0DaWWUbjP+xyMHXWjnQKos4bJ+LhtAoWnW5e4EkhCoghP0pJs2JIwSwnBcw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f625aea2-d7a2-4da1-835d-91a9d3e06e09",
                            TwoFactorEnabled = false,
                            UserName = "Joy"
                        },
                        new
                        {
                            Id = "a7bc4dd9-8f10-4e24-8c0c-ef09a24ec9a5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f101e6ff-1660-4ef0-88a0-febea92c2a65",
                            Email = "shiree@gmail.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEACvu6/GU2xzvabnByERjB8ng/PNaE8TTPuuZbhfQYUbbHDJ1igFs+31s+MfADYvkg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b0ed4bcf-3039-4c9c-9588-9994717a1904",
                            TwoFactorEnabled = false,
                            UserName = "Shiree"
                        },
                        new
                        {
                            Id = "6a2f5d0b-3eac-4dab-ae9d-7f26d77e4a8c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b184b6b1-5709-4b79-be9b-defdee4a0b3c",
                            Email = "gail@gmail.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEBRrfGK6wRkCHDtTY2dE4GoAveX/qSq5IF64jpM5ZMhWittRJ0VcqMsl8XoIKSQjqw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "163e0c5f-5e70-4786-8711-983d1fd76d2f",
                            TwoFactorEnabled = false,
                            UserName = "Gail"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CraftyCorner.Models.Event", b =>
                {
                    b.HasOne("CraftyCorner.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("CraftyCorner.Models.Item", b =>
                {
                    b.HasOne("CraftyCorner.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CraftyCorner.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("CraftyCorner.Models.ItemComment", b =>
                {
                    b.HasOne("CraftyCorner.Models.Item", "Item")
                        .WithMany("ItemComments")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CraftyCorner.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("CraftyCorner.Models.Rsvp", b =>
                {
                    b.HasOne("CraftyCorner.Models.Event", "Event")
                        .WithMany("Rsvps")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CraftyCorner.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("CraftyCorner.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CraftyCorner.Models.Event", b =>
                {
                    b.Navigation("Rsvps");
                });

            modelBuilder.Entity("CraftyCorner.Models.Item", b =>
                {
                    b.Navigation("ItemComments");
                });
#pragma warning restore 612, 618
        }
    }
}
