// <auto-generated />
using System;
using CraftyCorner.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CraftyCorner.Migrations
{
    [DbContext(typeof(CraftyCornerDbContext))]
    partial class CraftyCornerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "3D Printer"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Die or Die Cut Machine (Sizzix, Etc.)"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Embosser (Plate, Folder, Etc.)"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Gel Plate"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Heat Press"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Lamination Machine"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Laser Cutter/Machine"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Misc Hand Tools"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Other"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Paper Cutter Machine (Cricut, Cameo, Brother ScanNCut, Etc.)"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Sewing Machine"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Stamp Set"
                        });
                });

            modelBuilder.Entity("CraftyCorner.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "101 Main Street",
                            FirstName = "Admina",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            LastName = "Strator"
                        },
                        new
                        {
                            Id = 2,
                            Address = "555 Ocean Avenue",
                            FirstName = "Courtney",
                            IdentityUserId = "f2498ab4-e4b6-4e61-92c0-9568e96a8145",
                            LastName = "Gulledge"
                        },
                        new
                        {
                            Id = 3,
                            Address = "555 Jackson Street",
                            FirstName = "Joy",
                            IdentityUserId = "d9b5145a-739c-42d3-9e94-d2d439063d7e",
                            LastName = "Forbess"
                        },
                        new
                        {
                            Id = 4,
                            Address = "555 Middleburg Drive",
                            FirstName = "Shiree",
                            IdentityUserId = "a7bc4dd9-8f10-4e24-8c0c-ef09a24ec9a5",
                            LastName = "Bridges"
                        },
                        new
                        {
                            Id = 5,
                            Address = "555 Palm Court",
                            FirstName = "Gail",
                            IdentityUserId = "6a2f5d0b-3eac-4dab-ae9d-7f26d77e4a8c",
                            LastName = "Fogarty"
                        });
                });

            modelBuilder.Entity("Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PictureId")
                        .HasColumnType("integer");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PictureId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 10,
                            Manufacturer = "Cricut",
                            Name = "Maker 3",
                            Notes = "Not ready to loan this out, but I'd welcome you to come to my house to use.",
                            PictureId = 15,
                            UserProfileId = 5,
                            isActive = true
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 10,
                            Manufacturer = "Silhouette",
                            Name = "Cameo 4",
                            Notes = "Requires software to run and is registered with my laptop. May need to set up a play date to use.",
                            PictureId = 2,
                            UserProfileId = 2,
                            isActive = true
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Manufacturer = "Sizzix",
                            Name = "Big Shot",
                            Notes = "I have quite a few dies as well, not yet loaded on the site.",
                            PictureId = 3,
                            UserProfileId = 2,
                            isActive = true
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 8,
                            Manufacturer = "Cricut",
                            Name = "Multi Tool",
                            Notes = "Used for weeding",
                            PictureId = 19,
                            UserProfileId = 3,
                            isActive = true
                        });
                });

            modelBuilder.Entity("ItemComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("BorrowRequest")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ItemComments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Body = "I'd love to schedule some time with you and your Maker 3. Do you have availability within the next week or so?",
                            BorrowRequest = true,
                            Date = new DateTime(2023, 9, 21, 11, 5, 12, 0, DateTimeKind.Unspecified),
                            ItemId = 1,
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 2,
                            Body = "Sure! I'm retired and have a flexible schedule. Send me an email at gail@crafts.comx to set something up.",
                            BorrowRequest = false,
                            Date = new DateTime(2023, 9, 22, 12, 4, 11, 0, DateTimeKind.Unspecified),
                            ItemId = 1,
                            UserProfileId = 5
                        },
                        new
                        {
                            Id = 3,
                            Body = "I scheduled a play date with Gail, and we had a blast. Made some super cute crafts with the Maker 3 and made a new crafty friend. She's got an amazing setup.",
                            BorrowRequest = false,
                            Date = new DateTime(2023, 9, 28, 12, 4, 11, 0, DateTimeKind.Unspecified),
                            ItemId = 1,
                            UserProfileId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            ConcurrencyStamp = "89f75b7b-1beb-44b4-9c61-eb0d652718de",
                            Name = "Admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "f2498ab4-e4b6-4e61-92c0-9568e96a8145",
                            ConcurrencyStamp = "a211e4bf-fd02-4793-b30e-93247bdc1860",
                            Name = "Courtney",
                            NormalizedName = "courtney"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "983fc01a-2cbb-4b5c-97fb-fb406fe3f85e",
                            Email = "admina@strator.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEP/wmB2uI92juO7XAjZfKWGotnEL5q7uSMtbIqp6zzDgQqrTfvjutAknhYEAdDUmTg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1078d733-8869-4641-b244-9d2a44d99208",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "f2498ab4-e4b6-4e61-92c0-9568e96a8145",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7e3e8a23-13d9-46e9-8cf0-e435c8bce704",
                            Email = "courtney@gmail.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEFgibnoikc203wsBGCUYuO7qiUeZw6BiPovY36mQCUVPBUhPLUME7y+eH5MWrVpnzw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9992cdfc-0b90-4d4d-8582-0e011aeeeb79",
                            TwoFactorEnabled = false,
                            UserName = "Courtney"
                        },
                        new
                        {
                            Id = "d9b5145a-739c-42d3-9e94-d2d439063d7e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a92a656d-845a-4d3e-98bb-5cbeb4138064",
                            Email = "joy@gmail.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAENWYXNtDRxzuiC+dNJTuzKLKszeeIPk3YqBiv/JWhiWEhzGL61Cj/SGoJaY6AuFDzQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "da153aa6-d779-4dfd-9429-7c41f01619e8",
                            TwoFactorEnabled = false,
                            UserName = "Joy"
                        },
                        new
                        {
                            Id = "a7bc4dd9-8f10-4e24-8c0c-ef09a24ec9a5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2891b839-24c0-45a5-b0a0-7b9701700575",
                            Email = "shiree@gmail.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEPyKTvcIJmpIOsv3mJ2muNoa0eWIY+Dn6u9MpvUMyGnALV8Oe4B8opvIr0wt1e8KNw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6b855bfd-acb7-4760-9038-c6ff6d81c319",
                            TwoFactorEnabled = false,
                            UserName = "Shiree"
                        },
                        new
                        {
                            Id = "6a2f5d0b-3eac-4dab-ae9d-7f26d77e4a8c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0fa0f32c-c229-4877-8fe2-581812a8fbd6",
                            Email = "gail@gmail.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEFhJ9kw11wpvqa55dpL9oTrnriCc0uyoPLNapKRr5qDABpvb8EcPJ28sLjH72ogbXA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c8cc3dea-7778-4dfb-8fae-002af9df0438",
                            TwoFactorEnabled = false,
                            UserName = "Gail"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Pictures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Url = "https://photos.app.goo.gl/a1W2QAi5RXE7xrmt8"
                        },
                        new
                        {
                            Id = 2,
                            Url = "https://photos.app.goo.gl/TgrU2UY4yMrtGW2j8"
                        },
                        new
                        {
                            Id = 3,
                            Url = "https://photos.app.goo.gl/Xdqubxiexa5GYfhJ6"
                        },
                        new
                        {
                            Id = 4,
                            Url = "https://photos.app.goo.gl/Qm9c8RBRJ6yYidRx8"
                        },
                        new
                        {
                            Id = 5,
                            Url = "https://photos.app.goo.gl/kC9X4eGFXFc2EoVy9"
                        },
                        new
                        {
                            Id = 6,
                            Url = "https://photos.app.goo.gl/wUawcU2MdwRWnkdp9"
                        },
                        new
                        {
                            Id = 7,
                            Url = "https://photos.app.goo.gl/h3Z1Djmcy3btoR4w6"
                        },
                        new
                        {
                            Id = 8,
                            Url = "https://photos.app.goo.gl/zeDrmtvjsNfrLQ2y9"
                        },
                        new
                        {
                            Id = 9,
                            Url = "https://photos.app.goo.gl/cfi8qQ66o85h6ABa8"
                        },
                        new
                        {
                            Id = 10,
                            Url = "https://photos.app.goo.gl/BKDBdBUHa4Ym4dhy8"
                        },
                        new
                        {
                            Id = 11,
                            Url = "https://photos.app.goo.gl/tpMUcLgNXwAcmjyAA"
                        },
                        new
                        {
                            Id = 12,
                            Url = "https://photos.app.goo.gl/2ac6tXC3YkstNQY88"
                        },
                        new
                        {
                            Id = 13,
                            Url = "https://photos.app.goo.gl/vWiFzgXCxrTMzv5MA"
                        },
                        new
                        {
                            Id = 14,
                            Url = "https://photos.app.goo.gl/m2puCvfkXeUR3Hj88"
                        },
                        new
                        {
                            Id = 15,
                            Url = "https://photos.app.goo.gl/XS8gnGaM3JGjSEHy8"
                        },
                        new
                        {
                            Id = 16,
                            Url = "https://photos.app.goo.gl/cAvyzFM9dXCWqWw39"
                        },
                        new
                        {
                            Id = 17,
                            Url = "https://photos.app.goo.gl/ynKKkxUZh9QJWtZc6"
                        },
                        new
                        {
                            Id = 18,
                            Url = "https://photos.app.goo.gl/9BfwyoQiAJhVwYp27"
                        },
                        new
                        {
                            Id = 19,
                            Url = "https://photos.app.goo.gl/jdPXhF8RGFzLEQEg8"
                        },
                        new
                        {
                            Id = 20,
                            Url = "https://photos.app.goo.gl/Q8hbT5DivshS59sp6"
                        },
                        new
                        {
                            Id = 21,
                            Url = "https://photos.app.goo.gl/jGGE4FsiX8WHmtVe7"
                        },
                        new
                        {
                            Id = 22,
                            Url = "https://photos.app.goo.gl/Lh3cnrxbZQSuYb3p7"
                        });
                });

            modelBuilder.Entity("CraftyCorner.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Item", b =>
                {
                    b.HasOne("Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Picture", "Picture")
                        .WithMany()
                        .HasForeignKey("PictureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CraftyCorner.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Picture");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
