// <auto-generated />
using System;
using CraftyCorner.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CraftyCorner.Migrations
{
    [DbContext(typeof(CraftyCornerDbContext))]
    [Migration("20231018190357_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "3D Printer"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Die or Die Cut Machine (Sizzix, Etc.)"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Embosser (Plate, Folder, Etc.)"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Gel Plate"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Heat Press"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Lamination Machine"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Laser Cutter/Machine"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Misc Hand Tools"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Other"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Paper Cutter Machine (Cricut, Cameo, Brother ScanNCut, Etc.)"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Sewing Machine"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Stamp Set"
                        });
                });

            modelBuilder.Entity("CraftyCorner.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "101 Main Street",
                            FirstName = "Admina",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            LastName = "Strator"
                        },
                        new
                        {
                            Id = 2,
                            Address = "555 Ocean Avenue",
                            FirstName = "Courtney",
                            IdentityUserId = "f2498ab4-e4b6-4e61-92c0-9568e96a8145",
                            LastName = "Gulledge"
                        },
                        new
                        {
                            Id = 3,
                            Address = "555 Jackson Street",
                            FirstName = "Joy",
                            IdentityUserId = "d9b5145a-739c-42d3-9e94-d2d439063d7e",
                            LastName = "Forbess"
                        },
                        new
                        {
                            Id = 4,
                            Address = "555 Middleburg Drive",
                            FirstName = "Shiree",
                            IdentityUserId = "a7bc4dd9-8f10-4e24-8c0c-ef09a24ec9a5",
                            LastName = "Bridges"
                        },
                        new
                        {
                            Id = 5,
                            Address = "555 Palm Court",
                            FirstName = "Gail",
                            IdentityUserId = "6a2f5d0b-3eac-4dab-ae9d-7f26d77e4a8c",
                            LastName = "Fogarty"
                        });
                });

            modelBuilder.Entity("Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 10,
                            Manufacturer = "Cricut",
                            Name = "Maker 3",
                            Notes = "Not ready to loan this out, but I'd welcome you to come to my house to use.",
                            PictureUrl = "https://asset.cloudinary.com/dq4w2zwr2/7bd8376af3b8c75fc108f65acab9731b",
                            UserProfileId = 5,
                            isActive = true
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 10,
                            Manufacturer = "Silhouette",
                            Name = "Cameo 4",
                            Notes = "Requires software to run and is registered with my laptop. May need to set up a play date to use.",
                            PictureUrl = "https://asset.cloudinary.com/dq4w2zwr2/31dad32a8f0b4158f8042333b448870e",
                            UserProfileId = 2,
                            isActive = true
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Manufacturer = "Sizzix",
                            Name = "Big Shot",
                            Notes = "I have quite a few dies as well, not yet loaded on the site.",
                            PictureUrl = "https://asset.cloudinary.com/dq4w2zwr2/cd8bcc5b68fa0d1cc62eedc047d2316a",
                            UserProfileId = 2,
                            isActive = true
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 8,
                            Manufacturer = "Cricut",
                            Name = "Multi Tool",
                            Notes = "Used for weeding",
                            PictureUrl = "https://asset.cloudinary.com/dq4w2zwr2/db2d35b8cda97d72eb7578cefccc437d",
                            UserProfileId = 3,
                            isActive = true
                        });
                });

            modelBuilder.Entity("ItemComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("BorrowRequest")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ItemComments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Body = "I'd love to schedule some time with you and your Maker 3. Do you have availability within the next week or so?",
                            BorrowRequest = true,
                            Date = new DateTime(2023, 9, 21, 11, 5, 12, 0, DateTimeKind.Unspecified),
                            ItemId = 1,
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 2,
                            Body = "Sure! I'm retired and have a flexible schedule. Send me an email at gail@crafts.comx to set something up.",
                            BorrowRequest = false,
                            Date = new DateTime(2023, 9, 22, 12, 4, 11, 0, DateTimeKind.Unspecified),
                            ItemId = 1,
                            UserProfileId = 5
                        },
                        new
                        {
                            Id = 3,
                            Body = "I scheduled a play date with Gail, and we had a blast. Made some super cute crafts with the Maker 3 and made a new crafty friend. She's got an amazing setup.",
                            BorrowRequest = false,
                            Date = new DateTime(2023, 9, 28, 12, 4, 11, 0, DateTimeKind.Unspecified),
                            ItemId = 1,
                            UserProfileId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            ConcurrencyStamp = "27a4d34d-eec2-4372-9777-27f1793e8b85",
                            Name = "Admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "f2498ab4-e4b6-4e61-92c0-9568e96a8145",
                            ConcurrencyStamp = "d44b832a-ac77-4b91-8c2d-2ed4dd0541f3",
                            Name = "Courtney",
                            NormalizedName = "courtney"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f04840a2-54e2-49f1-acd9-05da7a32a0d4",
                            Email = "admina@strator.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEOu1FrkK+q15PfISoYDnvIccbiboNHncElKzv1L540rZxILFDYuycnVm+ZuIv95Xmw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a68265f3-5126-45af-846a-db1203b51071",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "f2498ab4-e4b6-4e61-92c0-9568e96a8145",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "824c6d8e-ab0e-4037-aec3-d7587570df16",
                            Email = "courtney@gmail.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEG5b+N93O2e9hQpXUYPTeWMR+bdjwvEUQti7mVro9qmJKBA7n5tyO6GHZ1HJDtS7dg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e7bde270-d469-401a-a29e-e7facde06722",
                            TwoFactorEnabled = false,
                            UserName = "Courtney"
                        },
                        new
                        {
                            Id = "d9b5145a-739c-42d3-9e94-d2d439063d7e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0c460f08-1ce9-44e6-96ea-9aaa61954f52",
                            Email = "joy@gmail.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAELDudZC1Cb3+U5rxog4LmNbtGMzltL4pi07udhtw8iK2ddzfHiqzd6vOnZcqG1kaKA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "58444edb-78f7-41c4-837c-a733a3d92944",
                            TwoFactorEnabled = false,
                            UserName = "Joy"
                        },
                        new
                        {
                            Id = "a7bc4dd9-8f10-4e24-8c0c-ef09a24ec9a5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "95d25475-20b0-4e51-893b-64699c165400",
                            Email = "shiree@gmail.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEE7AYl1jFUzrBc0FFry2cTP/HoHTCWIeYU84qyvPpQ+Jw3ynpeppfV6TBKTd4q8t4w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "72c4119e-0985-4c17-b0cc-a4afc924e029",
                            TwoFactorEnabled = false,
                            UserName = "Shiree"
                        },
                        new
                        {
                            Id = "6a2f5d0b-3eac-4dab-ae9d-7f26d77e4a8c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "39d593f2-8176-45b8-8753-870c4da69b19",
                            Email = "gail@gmail.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEBsd1X8qAgohrMg3Xn99wezMmR2hGrt0dkhQhR8JUioDJTqLzFPDrysnixXsm9UPlw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "49d9a574-67cc-4bb6-aca7-debb5cff62ea",
                            TwoFactorEnabled = false,
                            UserName = "Gail"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CraftyCorner.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Item", b =>
                {
                    b.HasOne("Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CraftyCorner.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
